{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"cas",
				"castedMenu"
			],
			[
				"item",
				"itemArray"
			],
			[
				"itemA",
				"_itemArray"
			],
			[
				"pen",
				"_pen"
			],
			[
				"dime",
				"_dimens"
			],
			[
				"MenuP",
				"MenuPens	MenuClasses"
			],
			[
				"Pen",
				"Pen	PenClasses"
			],
			[
				"grp",
				"_grpCursor	var"
			],
			[
				"x",
				"xanchor	var"
			],
			[
				"_sp",
				"_sprBackBG"
			],
			[
				"state",
				"_state	var"
			],
			[
				"Flag",
				"EventFlag	EventClasses"
			],
			[
				"BaseMenu",
				"BaseMenuItem	class"
			],
			[
				"closeString",
				"_closeString	var"
			],
			[
				"_arr",
				"_arrSprite	var"
			],
			[
				"length",
				"length-1"
			],
			[
				"Fl",
				"Flag	var"
			],
			[
				"close",
				"closeStringHack	function"
			],
			[
				"DIALOGCHOI",
				"MenuDialogChoices	class"
			],
			[
				"BaseMe",
				"BaseMenuItem	class"
			],
			[
				"MenuIte",
				"MenuItemFlag	class"
			],
			[
				"menuite",
				"MenuItemFlag	MenuClasses"
			],
			[
				"MenuItemFl",
				"MenuItemFlag	class"
			],
			[
				"MenuItemfl",
				"MenuItemFlag	class"
			],
			[
				"set",
				"setMenu"
			],
			[
				"_d",
				"_descText"
			],
			[
				"MenuItemItem",
				"MenuItemItem	class"
			],
			[
				"sele",
				"_selected"
			],
			[
				"use",
				"isUsed"
			],
			[
				"_ar",
				"_arrSprite	var"
			],
			[
				"_a",
				"_arrSprite	var"
			],
			[
				"gener",
				"generateItemArray"
			],
			[
				"MenuInven",
				"MenuInventory	class"
			],
			[
				"remo",
				"removeItem"
			],
			[
				"MenuItem",
				"BaseMenuItem	class"
			],
			[
				"Ite",
				"ItemHealing	ItemClasses"
			],
			[
				"dim",
				"_dimens"
			],
			[
				"BaseM",
				"BaseMenu	class"
			],
			[
				"_ite",
				"_itemDimens	var"
			],
			[
				"Item",
				"ItemArray	var"
			],
			[
				"_item",
				"_itemArray	var"
			],
			[
				"_arrS",
				"_arrSprite2	var"
			],
			[
				"itemd",
				"_itemDimens	var"
			],
			[
				"_sele",
				"_selected2	var"
			],
			[
				"clo",
				"_closeString	var"
			],
			[
				"n",
				"name"
			],
			[
				"i",
				"isAlive"
			],
			[
				"_clos",
				"_closeItem	var"
			],
			[
				"Men",
				"BaseMenu	class"
			],
			[
				"an",
				"anyJustPressed"
			],
			[
				"Flx",
				"FlxG	flixel"
			],
			[
				"l",
				"length-1"
			],
			[
				"_grp",
				"_grpPicrossSquaresBoards	var"
			],
			[
				"_",
				"_arrSprite	var"
			],
			[
				"_m",
				"_menu"
			],
			[
				"_gr",
				"_grpSprites	var"
			],
			[
				"batt",
				"battleState"
			],
			[
				"STA",
				"STATE_BATTLE	var"
			],
			[
				"STATE",
				"STATE_MENU	var"
			],
			[
				"Town",
				"TownState	class"
			],
			[
				"BaseMen",
				"BaseMenuItem	class"
			],
			[
				"Base",
				"BaseMenu	class"
			],
			[
				"_spr",
				"_sprEnemy	var"
			],
			[
				"_e",
				"_enemyIDs	var"
			],
			[
				"enemy",
				"_enemyNum	var"
			],
			[
				"ene",
				"_enemyNum	var"
			],
			[
				"col",
				"colHints"
			],
			[
				"gr",
				"gridPicrossSquares	var"
			],
			[
				"Picross",
				"PicrossSquare	class"
			],
			[
				"Picro",
				"PicrossSquare	class"
			],
			[
				"row",
				"rowHints"
			],
			[
				"arr",
				"arrColHints	var"
			],
			[
				"hi",
				"_rowHints"
			],
			[
				"eve",
				"eventManager"
			],
			[
				"event",
				"EventDialog	EventClasses"
			],
			[
				"Dialog",
				"EventDialog	EventClasses"
			],
			[
				"Even",
				"EventManager	EventClasses"
			],
			[
				"Dialo",
				"DialogBox	DialogClasses"
			],
			[
				"wa",
				"walkPath"
			],
			[
				"fl",
				"FlxObject"
			],
			[
				"dia",
				"dialogBox"
			],
			[
				"Dial",
				"DialogLine	var"
			],
			[
				"Dia",
				"DialogBox	DialogClasses"
			],
			[
				"base",
				"baseY	var"
			],
			[
				"STAT",
				"STATE_CUTSCENE"
			],
			[
				"Sta",
				"STATE"
			],
			[
				"Line",
				"DialogLine	DialogClasses"
			],
			[
				"fa",
				"Face	var"
			],
			[
				"obj",
				"objectsLayer"
			],
			[
				"encount",
				"encounterMap	var"
			],
			[
				"encou",
				"encounterMap	var"
			],
			[
				"encon",
				"encounterMap"
			],
			[
				"encounter",
				"encounterMap"
			],
			[
				"back",
				"backgroundLayer"
			],
			[
				"line",
				"_lineNumber	var"
			],
			[
				"timer",
				"_lineTimer	var"
			],
			[
				"sprb",
				"sprBlinker	var"
			],
			[
				"cu",
				"curAnim"
			],
			[
				"re",
				"Reg	class"
			],
			[
				"tile",
				"tileLayer	var"
			],
			[
				"ent",
				"entID	var"
			],
			[
				"D",
				"DOWN"
			],
			[
				"next",
				"nextlvl"
			],
			[
				"Ne",
				"NextLvlEnt	var"
			],
			[
				"ne",
				"nextLvlEnt	var"
			],
			[
				"Ent",
				"EntranceID	var"
			],
			[
				"coll",
				"collidableTileMap	var"
			],
			[
				"load",
				"loadMap"
			],
			[
				"fill",
				"fillStyle"
			]
		]
	},
	"buffers":
	[
		{
			"file": "source/FrogPond.hx",
			"settings":
			{
				"buffer_size": 1194,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "package;\n\nimport flixel.FlxG;\nimport flixel.FlxObject;\nimport flixel.FlxSprite;\nimport flixel.FlxState;\nimport flixel.FlxSubState;\nimport flixel.group.FlxGroup;\nimport flixel.text.FlxText;\nimport flixel.util.FlxColor;\n\nimport PenClasses;\n\n/**\n * ...\n * @author Bownly\n */\n\n\n\nclass BaseMenuItem\n{\n	public var name:String;\n\n	public function new(Name:String)\n	{\n		name = Name;\n	}\n\n	public function selected()\n	{\n	}\n\n	public function highlighted()\n	{\n	}\n}\n\nclass MenuItemClose extends BaseMenuItem\n{\n	public var menu:BaseMenu;\n\n	public function new(Name:String, Menu:BaseMenu)\n	{\n		menu = Menu;\n		super(Name);\n	}\n\n	override function selected()\n	{\n		menu.close();\n	}\n}\n\n\nclass MenuItemFlag extends MenuItemClose\n{\n	var _flag:EventClasses.EventFlag;\n\n	public function new(Name:String, Menu:BaseMenu, Flag:EventClasses.EventFlag)\n	{\n		_flag = Flag;\n		super(Name, Menu);\n	}\n\n	override public function selected()\n	{\n		_flag.update();\n		super.selected();\n	}\n}\n\nclass MenuItemItem extends BaseMenuItem\n{\n	public var item:ItemClasses.BaseItem;\n	var _menu:MenuInventory;\n\n	public function new(Item:ItemClasses.BaseItem, Inv:MenuInventory)\n	{\n		item = Item;\n		_menu = Inv;\n		super(item.name);\n	}\n\n	override public function selected()\n	{\n		item.use();\n		_menu.refresh(_menu.generateItems());\n		super.selected();\n	}\n}\n\n\nclass MenuItemPen extends BaseMenuItem\n{\n	var _pen:Pen;\n	\n	public function new(P:Pen)\n	{\n		_pen = P;\n		super(_pen.name);\n	}\n\n	override public function selected()\n	{\n		PenManager.equip(_pen);\n		super.selected();\n	}\n}\n\n\nclass MenuItemSubMenu extends BaseMenuItem\n{\n	var _state:FlxState;\n	var _substate:FlxSubState;\n	var _menu:BaseMenu;\n\n	public function new(Name:String, State:FlxState, Sub:FlxSubState, Menu:BaseMenu)\n	{\n		_menu = Menu;\n		_state = State;\n		_substate = Sub;\n		super(Name);\n	}\n\n	override public function selected()\n	{\n		var sub = new MenuSubState(FlxG.width/2, FlxG.height/2, _substate);\n		// var menu = new MenuPause([_menu.coords[0] + 20, _menu.coords[1] + 20], [100, 100], 1, _substate, sub);\n\n		var menu:BaseMenu = null;\n		var x = _menu.coords[0] + _menu.dimens[0]/2;\n		if (Type.getClassName(Type.getClass(_menu)) == \"MenuPens\")\n		{\n			menu = new MenuPens([x, _menu.coords[1]], [100, 100]);\n			var castedMenu = cast(_menu, MenuPens);\n			castedMenu.refresh(castedMenu.itemArray);\n		}\n		else if (Type.getClassName(Type.getClass(_menu)) == \"MenuInventory\")\n			menu = new MenuInventory([x, _menu.coords[1]], \n							[100, 200], \n							1, \"back\");\n		else if (Type.getClassName(Type.getClass(_menu)) == \"MenuPause\")\n			menu = new MenuPause([x, _menu.coords[1]], [100, 100], 1, _substate, sub);\n\n		sub.setMenu(menu);\n\n		_substate.openSubState(sub);		\n		super.selected();\n	}\n\n}\n\n\n\n\nclass BaseMenu extends FlxGroup\n{\n	public var isAlive:Bool = true;\n\n	var _sprBack:FlxSprite;\n	var _sprBackBG:FlxSprite;\n    public var coords:Array<Float>;\n    public var dimens:Array<Float>;\n    var _itemDimens:Int;\n    var _xPad:Int = 8;\n    var _yPad:Int = 8;\n\n	var _grpEverything:FlxTypedGroup<FlxSprite>;\n	var _cursor:FlxSprite;\n	var _selected:Array<Int> = [0, 0];\n	var _arr:Array<Array<BaseMenuItem>>;\n	public var arrItem:Array<BaseMenuItem>;\n	var _arrSprite:Array<Array<FlxText>>;\n	var _closeString:String;\n	var _closeItem:MenuItemClose;\n	var _window:Window;\n\n	public function new(Coords:Array<Float>, Dimens:Array<Float>, ItemDimens:Int, ItemArray:Array<BaseMenuItem>, ?CloseString) \n	{\n\n		super();\n		_arrSprite = new Array<Array<FlxText>>();\n		_grpEverything = new FlxTypedGroup<FlxSprite>();\n		coords = Coords;\n		dimens = Dimens;\n		_itemDimens = ItemDimens;\n		_arr = new Array<Array<BaseMenuItem>>();\n		arrItem = ItemArray;\n\n		if (CloseString != null)\n			_closeString = CloseString;\n	\n		_window = new Window(coords, dimens);\n	\n		_cursor = new FlxSprite(0, 0);\n		_cursor.loadGraphic(\"assets/images/dialog_blinker.png\", true, 10, 10);\n		_cursor.animation.add(\"idle\", [0, 1], 3, true);\n		_cursor.animation.play(\"idle\");\n		_cursor.x = coords[0] + _window.pad;\n		_cursor.y = coords[1] + _window.pad;\n		_grpEverything.add(_cursor);\n\n 		refresh(arrItem);\n	\n		add(_window);\n		add(_grpEverything);\n		\n		for(item in _grpEverything) \n			item.scrollFactor.set();\n	}\n\n	override public function update(elapsed:Float)\n	{\n		super.update(elapsed);\n\n		if (FlxG.keys.anyJustPressed([\"DOWN\", \"S\"]))\n		{\n			if (_selected[1]+1 < _arrSprite.length && _arrSprite[_selected[1]+1][_selected[0]] != null)\n				_selected[1] += 1;\n			else \n				_selected[1] = 0;\n			_cursor.y = _arrSprite[_selected[1]][_selected[0]].y;\n		}\n		else if (FlxG.keys.anyJustPressed([\"UP\", \"W\"]))\n		{\n			if (_selected[1]-1 >= 0 && _arrSprite[_selected[1]-1][_selected[0]] != null)\n				_selected[1] -= 1;\n			else\n			{\n				while (_selected[1]+1 < _arrSprite.length && _arrSprite[_selected[1]+1][_selected[0]] != null)\n					_selected[1] += 1;					\n			}\n			_cursor.y = _arrSprite[_selected[1]][_selected[0]].y;\n		}\n		else if (FlxG.keys.anyJustPressed([\"RIGHT\", \"D\"]))\n		{\n			if (_selected[0] >= _arrSprite[0].length-1)\n				_selected[0] = 0;\n			else if (_arrSprite[_selected[1]][_selected[0]+1] != null)\n				_selected[0] += 1;\n			_cursor.x = _arrSprite[_selected[1]][_selected[0]].x - _cursor.width;\n		}\n		else if (FlxG.keys.anyJustPressed([\"LEFT\", \"A\"]))\n		{\n			if (_selected[0] <= 0 && _arrSprite[_selected[1]][_arrSprite[1].length-1] != null)\n				_selected[0] = _arrSprite[1].length-1;\n			else if (_selected[0] <= 0 && _arrSprite[_selected[1]][_arrSprite[1].length-1] == null)\n				_selected[0] += 0;\n			else \n				_selected[0] -= 1;\n			_cursor.x = _arrSprite[_selected[1]][_selected[0]].x - _cursor.width;\n		}\n\n		if (FlxG.keys.anyJustPressed([\"J\"]))\n			_arr[_selected[1]][_selected[0]].selected();\n		// note: the null check is to disallow backing out of a dialog choice menu\n		else if (FlxG.keys.anyJustPressed([\"K\"]) && _closeString != null)\n			close();\n\n	}\n\n	public function close()\n	{\n		isAlive = false;\n	}\n\n	public function refresh(ItemArray:Array<BaseMenuItem>)\n	{\n		_arr = [];\n		for (i in 0...Math.ceil(ItemArray.length/_itemDimens))\n		{\n			var tempArr:Array<BaseMenuItem> = new Array<BaseMenuItem>();\n			for (j in 0..._itemDimens)\n			{\n				var item:BaseMenuItem = ItemArray[j+(i*_itemDimens)];\n				if (item != null)\n					tempArr.push(item);\n			}\n			if (tempArr != null)\n				_arr.push(tempArr);\n		}\n\n		for (sprites in _arrSprite)\n		{\n			for (spr in sprites)\n			{\n				if (spr != null)\n					spr.visible = false;\n			}\n		}\n\n		_arrSprite = [];\n		for (i in 0..._arr.length)\n		{\n			var tempArr:Array<FlxText> = new Array<FlxText>();\n			for (j in 0..._arr[i].length)\n			{\n				// var item = new FlxText(_sprBack.x + _cursor.width, _sprBack.y, 64, _arr[i][j].name, 8);\n				var item = new FlxText(coords[0] + _cursor.width, coords[1], 64, _arr[i][j].name, 8);\n				item.y += i * item.height + _window.pad*2;\n				item.x += (dimens[0] * (j/_itemDimens)) + _window.pad*2;\n				if (item != null)\n					tempArr.push(item);\n				_grpEverything.add(item);\n			}\n			if (tempArr != null)\n				_arrSprite.push(tempArr);\n		}\n\n		if (_closeString != null)\n		{\n			_closeItem = new MenuItemClose(_closeString, this);\n				_arr.push([_closeItem, null]);\n				// var item = new FlxText(_sprBack.x + _cursor.width, _sprBack.y, 64, _arr[_arr.length-1][0].name, 8);\n				var item = new FlxText(coords[0] + _cursor.width, coords[1], 64, _arr[_arr.length-1][0].name, 8);\n				item.x += _window.pad*2;\n				// while (item.y < _sprBack.y + _sprBack.height - _yPad - item.height)\n				while (item.y < coords[1] + dimens[1] - _yPad - item.height)\n				{\n					item.y += item.height;\n				}\n		\n				_arrSprite.push([item, null]);\n				_grpEverything.add(item);\n		}\n\n		for (spr in _arrSprite)\n		{\n			for (sprite in spr)\n			{\n				if (sprite != null)\n					sprite.scrollFactor.set();\n			}\n		}\n\n		_selected = [0, 0];\n		_cursor.x = _arrSprite[_selected[1]][_selected[0]].x - _cursor.width;\n		_cursor.y = _arrSprite[_selected[1]][_selected[0]].y;\n\n	}\n\n}\n\n\nclass MenuDialogChoices extends BaseMenu\n{\n	public function new(Coords:Array<Float>, Dimens:Array<Float>, ItemDimens:Int, ItemArray:Array<BaseMenuItem>)\n	{\n		super(Coords, Dimens, ItemDimens, ItemArray);\n		setMenus();\n	}\n\n	public function setMenus()\n	{\n		for (item in arrItem)\n		{\n				if (Type.getClassName(Type.getClass(item)) == \"MenuItemFlag\")\n					cast(item, MenuItemFlag).menu = this;\n		}\n	}\n\n	override public function close()\n	{\n		super.close();\n		Reg.STATE = Reg.STATE_CUTSCENE;\n	}\n}\n\n\nclass MenuInventory extends BaseMenu\n{\n	var _itemArray:Array<BaseMenuItem>;\n	var _descText:FlxText;\n\n	public function new(Coords:Array<Float>, Dimens:Array<Float>, ColCount:Int, ?CloseString:String)\n	{	\n		_itemArray = generateItems();\n		super(Coords, Dimens, ColCount, _itemArray, CloseString);\n		_descText = new FlxText(coords[0] + 4, coords[1] - 12, dimens[0], \"Text\", 8);\n		add(_descText);\n		_descText.scrollFactor.set();\n	}\n\n	public function generateItems():Array<BaseMenuItem>\n	{\n		var items:Array<BaseMenuItem> = new Array<BaseMenuItem>();\n		for (item in ItemClasses.InventoryManager._arr)\n		{\n			items.push(new MenuItemItem(item, this));\n		}\n		return items;		\n	}\n\n	override public function update(elapsed:Float)\n	{\n		super.update(elapsed);\n\n		var item:BaseMenuItem = _arr[_selected[1]][_selected[0]];\n\n		if (Type.getClassName(Type.getClass(item)) == \"MenuItemItem\")\n			_descText.text = cast(item, MenuItemItem).item.desc;\n		else  // that pesky MenuItemClose isn't a MenuItemItem!\n			_descText.text = \"Next battle!\";\n\n\n	}\n\n}\n\n\nclass MenuPause extends BaseMenu\n{\n	var _itemArray:Array<BaseMenuItem>;\n\n	public function new(Coords:Array<Float>, Dimens:Array<Float>, ItemDimens:Int, State:FlxState, Sub:FlxSubState)\n	{	\n		_itemArray = [  new MenuItemSubMenu(\"Pens\", State, Sub, new MenuPens(Coords, Dimens)),\n						new MenuItemSubMenu(\"Items\", State, Sub, new MenuInventory(Coords, Dimens, 1, \"back\"))\n		];\n\n		super(Coords, Dimens, ItemDimens, _itemArray, \"close\");\n	}\n}\n\n\nclass MenuPens extends BaseMenu\n{\n	public var itemArray:Array<BaseMenuItem> = [];\n\n	public function new(Coords:Array<Float>, Dimens:Array<Float>)\n	{\n		for (pen in PenClasses.PenManager.arrPens)\n		{\n			if (pen.isUnlocked == true)\n			{\n				itemArray.push(new MenuItemPen(pen));\n			}\n		}\n		super(Coords, Dimens, 1, itemArray, \"back\");\n	}\n\n	override public function refresh(_itemArray)\n	{\n		super.refresh(_itemArray)\n	}\n}\n\n\n\n",
			"file": "source/MenuClasses.hx",
			"file_size": 10158,
			"file_write_time": 1468110330000000,
			"settings":
			{
				"buffer_size": 10239,
				"line_ending": "Unix",
				"name": "MenuClasses.hx"
			}
		},
		{
			"file": "source/PenClasses.hx",
			"settings":
			{
				"buffer_size": 1463,
				"line_ending": "Unix",
				"name": "PenClasses.hx"
			}
		},
		{
			"file": "source/FrogPond1.hx",
			"settings":
			{
				"buffer_size": 1572,
				"line_ending": "Unix",
				"name": "FrogPond-1"
			}
		},
		{
			"file": "source/BattleSubState.hx",
			"settings":
			{
				"buffer_size": 13694,
				"line_ending": "Unix"
			}
		},
		{
			"file": "source/TownState.hx",
			"settings":
			{
				"buffer_size": 5898,
				"line_ending": "Unix"
			}
		},
		{
			"file": "source/DialogSubState.hx",
			"settings":
			{
				"buffer_size": 3914,
				"line_ending": "Unix"
			}
		},
		{
			"file": "source/MenuSubState.hx",
			"settings":
			{
				"buffer_size": 2048,
				"line_ending": "Unix"
			}
		},
		{
			"file": "source/PicrossBoard.hx",
			"settings":
			{
				"buffer_size": 5491,
				"line_ending": "Unix"
			}
		},
		{
			"file": "source/Window.hx",
			"settings":
			{
				"buffer_size": 923,
				"line_ending": "Unix"
			}
		},
		{
			"file": "source/Strings.hx",
			"settings":
			{
				"buffer_size": 7063,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 87.0,
		"selected_items":
		[
			[
				"insta",
				"Package Control: Install Package"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 125.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/computer/Documents/Projects/HaxeFlixel/PiX/PicrossRPG/source/EventClasses.hx",
		"/Users/computer/Documents/Projects/HaxeFlixel/PiX/PicrossRPG/source/DialogClasses.hx",
		"/Users/computer/Documents/Projects/HaxeFlixel/PiX/PicrossRPG/source/DialogChoiceSubState.hx",
		"/Users/computer/Documents/Projects/HaxeFlixel/PiX/PicrossRPG/source/NPC.hx",
		"/Users/computer/Documents/Projects/HaxeFlixel/PiX/PicrossRPG/source/Window.hx",
		"/Users/computer/Documents/Projects/HaxeFlixel/PiX/PicrossRPG/source/Reg.hx",
		"/Users/computer/Documents/Projects/HaxeFlixel/PiX/PicrossRPG/source/BattleSubState.hx",
		"/Users/computer/Documents/Projects/HaxeFlixel/PiX/PicrossRPG/source/MenuSubState.hx",
		"/Users/computer/Documents/Projects/HaxeFlixel/PiX/PicrossRPG/source/PicrossBoard.hx",
		"/Users/computer/Documents/Projects/HaxeFlixel/PiX/PicrossRPG/source/Strings.hx",
		"/Users/computer/Documents/Projects/HaxeFlixel/PiX/PicrossRPG/source/Player.hx",
		"/Users/computer/Documents/Projects/HaxeFlixel/PiX/PicrossRPG/source/ItemClasses.hx",
		"/Users/computer/Documents/Projects/HaxeFlixel/PiX/PicrossRPG/source/TiledLevel.hx",
		"/Users/computer/Documents/Projects/HaxeFlixel/PiX/PicrossRPG/source/PicrossSquare.hx",
		"/Users/computer/Documents/Projects/HaxeFlixel/PiX/PicrossRPG/source/MenuState.hx",
		"/Users/computer/Documents/Projects/HaxeFlixel/PiX/PicrossRPG/source/DialogSubState.hx",
		"/Users/computer/Documents/Projects/HaxeFlixel/PiX/PicrossRPG/source/TownState.hx",
		"/Users/computer/Documents/Projects/HaxeFlixel/PiX/PicrossRPG/source/PlayState.hx",
		"/Users/computer/Documents/Projects/HaxeFlixel/PiX/PicrossRPG/source/WorldMap.hx",
		"/Users/computer/Documents/Projects/HaxeFlixel/PiX/PicrossRPG/assets/levels/town1.tmx",
		"/Users/computer/Documents/Projects/HaxeFlixel/PiX/PicrossRPG/assets/levels/tiles_town.png",
		"/Users/computer/Documents/Projects/HaxeFlixel/PiX/PicrossRPG/assets/levels/frogpond-1.tmx",
		"/Users/computer/Documents/Projects/HaxeFlixel/PiX/PicrossRPG/source/Exit.hx",
		"/Users/computer/Documents/Projects/HaxeFlixel/PiX/PicrossRPG/assets/levels/worldmap.tmx",
		"/Users/computer/Documents/Projects/HaxeFlixel/PiX/PicrossRPG/source/DialogBox.hx",
		"/Users/computer/Documents/Projects/HaxeFlixel/PiX/PicrossRPG/PiX_sublime.sublime-project",
		"/Users/computer/Documents/Projects/HaxeFlixel/PiX/PicrossRPG/source/Entrance.hx",
		"/Users/computer/Documents/Projects/HaxeFlixel/PiX/PicrossRPG/source/TiledMap.hx",
		"/Users/computer/Documents/Projects/HaxeFlixel/PiX/PicrossRPG/source/StatsSubState.hx",
		"/Users/computer/Documents/Projects/HaxeFlixel/PiX/PicrossRPG/source/CreditsState.hx",
		"/Users/computer/Documents/Projects/HaxeFlixel/PiX/PicrossRPG/source/SoundRoomState.hx",
		"/Users/computer/Documents/Projects/HaxeFlixel/PiX/PicrossRPG/Project.xml",
		"/Users/computer/Documents/Projects/HaxeFlixel/PiX/PicrossRPG/source/EndBossFightSubState.hx",
		"/Users/computer/Documents/Projects/HaxeFlixel/PiX/PicrossRPG/source/TownStateog.hx",
		"/Users/computer/Documents/Projects/HaxeFlixel/PiX/PicrossRPG/assets/levels/town_1.oel",
		"/Users/computer/Documents/Projects/HaxeFlixel/BoMM/Pastel/PicrossRPG/source/Main.hx",
		"/Users/computer/Documents/Projects/HaxeFlixel/BoMM/Pastel/PicrossRPG/source/BattleSubState.hx",
		"/Users/computer/Documents/Projects/HaxeFlixel/simplegame/simplegame.sublime-project",
		"/Users/computer/Documents/Projects/HaxeFlixel/BoMM/Pastel/PicrossRPG/source/AssetPaths.hx",
		"/Users/computer/Documents/Projects/HaxeFlixel/BoMM/Pastel/PicrossRPG/AssetPaths.hx",
		"/Users/computer/Documents/Projects/HaxeFlixel/BoMM/Pastel/PicrossRPG/source/CreditsState.hx",
		"/Users/computer/Documents/Projects/HaxeFlixel/BoMM/Pastel/PicrossRPG/source/DialogBox.hx",
		"/Users/computer/Documents/Projects/HaxeFlixel/BoMM/Pastel/PicrossRPG/source/DialogSubState.hx",
		"/Users/computer/Documents/Projects/HaxeFlixel/BoMM/Pastel/PicrossRPG/source/Dungeon.hx",
		"/Users/computer/Documents/Projects/HaxeFlixel/BoMM/Pastel/PicrossRPG/source/EndBoss.hx",
		"/Users/computer/Documents/Projects/HaxeFlixel/BoMM/Pastel/PicrossRPG/source/EndBossFightSubState.hx",
		"/Users/computer/Documents/Projects/HaxeFlixel/BoMM/Pastel/PicrossRPG/source/MenuState.hx",
		"/Users/computer/Documents/Projects/HaxeFlixel/BoMM/Pastel/PicrossRPG/source/NPC.hx",
		"/Users/computer/Documents/Projects/HaxeFlixel/BoMM/Pastel/PicrossRPG/source/PicrossSquare.hx",
		"/Users/computer/Documents/Projects/HaxeFlixel/BoMM/Pastel/PicrossRPG/source/Player.hx",
		"/Users/computer/Documents/Projects/HaxeFlixel/BoMM/Pastel/PicrossRPG/source/PlayState.hx",
		"/Users/computer/Documents/Projects/HaxeFlixel/BoMM/Pastel/PicrossRPG/source/Reg.hx",
		"/Users/computer/Documents/Projects/HaxeFlixel/BoMM/Pastel/PicrossRPG/source/SoundRoomState.hx",
		"/Users/computer/Documents/Projects/HaxeFlixel/BoMM/Pastel/PicrossRPG/source/StatsSubState.hx",
		"/Users/computer/Documents/Projects/HaxeFlixel/BoMM/Pastel/PicrossRPG/source/Strings.hx",
		"/Users/computer/Documents/Projects/HaxeFlixel/BoMM/Pastel/PicrossRPG/source/Town1.hx",
		"/Users/computer/Documents/Projects/HaxeFlixel/BoMM/Pastel/PicrossRPG/source/Town2.hx",
		"/Users/computer/Documents/Projects/HaxeFlixel/BoMM/Pastel/PicrossRPG/source/Town3.hx",
		"/Users/computer/Documents/Projects/HaxeFlixel/BoMM/Pastel/PicrossRPG/source/Town4.hx",
		"/Users/computer/Documents/Projects/HaxeFlixel/BoMM/Pastel/PicrossRPG/source/TownState.hx",
		"/Users/computer/Documents/Projects/HaxeFlixel/BoMM/Pastel/PicrossRPG/source/WinState.hx",
		"/Users/computer/Documents/Projects/HaxeFlixel/BoMM/Pastel/PicrossRPG/source/WorldMap.hx",
		"/Users/computer/Downloads/youtube-tutorials-master/tic-toe/game.js"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"_sprbac",
			"_coords",
			"_sprback",
			"window.p",
			"_pad",
			"CUTS",
			"cutsce",
			"cast",
			"close",
			"pMP",
			"_mp",
			"_sprCursor",
			"cursor",
			"_mp",
			"trace",
			"setUpItemArray",
			".text",
			"_cursor.",
			"_cursor.x",
			"Itemarra",
			"itemarra",
			"_coords",
			"itemDimens[0]",
			"itemdimens[1]",
			"dimens[1]",
			"substate",
			"_selected2",
			"_arrSprite2",
			"_arr2",
			"_arrsprite",
			"sprenemy",
			"aprenemy",
			"enemy",
			"_menu",
			"close",
			"battleState",
			"assign",
			"_grpPicrossSquaresBoards",
			"trace",
			"playanim",
			"_status",
			"checkrow",
			"this is",
			"_answer",
			"bold",
			"lng",
			"text",
			"colarray",
			"rowhints",
			"colarray",
			"calcColHints",
			"calcCol",
			"grpPicross",
			"_id",
			"picross",
			"_grpSprites",
			"_grpTexts",
			"becc34",
			"dialogbox",
			"npc",
			"openDialogSubState",
			"open",
			"Sub",
			"sub",
			"\"J",
			"J\"",
			"sub",
			"state",
			"npc",
			"bent",
			"cutsce",
			"arrpath",
			"state",
			"substa",
			"dialog",
			"substa",
			"dline",
			"dialogbo",
			");\n",
			"16",
			"int",
			"subst",
			"dialogsub",
			"dialog",
			"width",
			"backgroundl",
			"background",
			"collidab",
			"endbo",
			"linenumb",
			"dline",
			"linecount",
			"index",
			"npc",
			"substate",
			"race",
			".int",
			"width",
			"trace",
			"tiledtilela",
			"trace",
			"level",
			"state",
			"objects",
			"objectsl",
			"tilemap",
			"backgroundl",
			"objectsl",
			"backgroun",
			"backgroundl",
			"backg",
			"colli",
			"Floor",
			"map",
			"trance",
			"trace",
			"update",
			"u",
			"upd",
			"update",
			"int",
			"cursor",
			"trace",
			"_dim",
			"_enemyID",
			"_enemy",
			"loadgra",
			"\n			"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"player"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "source/FrogPond.hx",
					"settings":
					{
						"buffer_size": 1194,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								1194
							]
						],
						"settings":
						{
							"haxe-build-id": 0,
							"syntax": "Packages/Haxe/Haxe.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "source/MenuClasses.hx",
					"settings":
					{
						"buffer_size": 10239,
						"regions":
						{
						},
						"selection":
						[
							[
								10198,
								10198
							]
						],
						"settings":
						{
							"auto_name": "MenuClasses.hx",
							"haxe-build-id": 0,
							"syntax": "Packages/Haxe/Haxe.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 397.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "source/PenClasses.hx",
					"settings":
					{
						"buffer_size": 1463,
						"regions":
						{
						},
						"selection":
						[
							[
								1179,
								1179
							]
						],
						"settings":
						{
							"auto_name": "PenClasses.hx",
							"haxe-build-id": 0,
							"syntax": "Packages/Haxe/Haxe.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "source/FrogPond1.hx",
					"settings":
					{
						"buffer_size": 1572,
						"regions":
						{
						},
						"selection":
						[
							[
								1190,
								1190
							]
						],
						"settings":
						{
							"auto_name": "FrogPond-1",
							"haxe-build-id": 0,
							"syntax": "Packages/Haxe/Haxe.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 401.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "source/BattleSubState.hx",
					"settings":
					{
						"buffer_size": 13694,
						"regions":
						{
						},
						"selection":
						[
							[
								13415,
								13276
							]
						],
						"settings":
						{
							"haxe-build-id": 0,
							"syntax": "Packages/Haxe/Haxe.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 6855.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "source/TownState.hx",
					"settings":
					{
						"buffer_size": 5898,
						"regions":
						{
						},
						"selection":
						[
							[
								827,
								827
							]
						],
						"settings":
						{
							"haxe-build-id": 0,
							"syntax": "Packages/Haxe/Haxe.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "source/DialogSubState.hx",
					"settings":
					{
						"buffer_size": 3914,
						"regions":
						{
						},
						"selection":
						[
							[
								3115,
								3115
							]
						],
						"settings":
						{
							"haxe-build-id": 0,
							"syntax": "Packages/Haxe/Haxe.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1548.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "source/MenuSubState.hx",
					"settings":
					{
						"buffer_size": 2048,
						"regions":
						{
						},
						"selection":
						[
							[
								1006,
								776
							]
						],
						"settings":
						{
							"haxe-build-id": 0,
							"syntax": "Packages/Haxe/Haxe.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 421.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "source/PicrossBoard.hx",
					"settings":
					{
						"buffer_size": 5491,
						"regions":
						{
						},
						"selection":
						[
							[
								2496,
								2496
							]
						],
						"settings":
						{
							"haxe-build-id": 0,
							"syntax": "Packages/Haxe/Haxe.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 1.0,
						"translation.y": 1013.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "source/Window.hx",
					"settings":
					{
						"buffer_size": 923,
						"regions":
						{
						},
						"selection":
						[
							[
								505,
								505
							]
						],
						"settings":
						{
							"haxe-build-id": 0,
							"syntax": "Packages/Haxe/Haxe.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 51.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "source/Strings.hx",
					"settings":
					{
						"buffer_size": 7063,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"haxe-build-id": 0,
							"syntax": "Packages/Haxe/Haxe.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 2.0,
						"translation.y": 1997.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true
}
